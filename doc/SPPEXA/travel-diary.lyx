#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Propel with OpenCL
\end_layout

\begin_layout Standard
Workshop OpenCL optimizations on Intel hardware
\end_layout

\begin_layout Standard
Thread arbiter allows to hide latency of some memory operations
\end_layout

\begin_layout Standard
1 subslice = 8 EU contains L1 and L2 cache 64B/cycle bandwidth
\end_layout

\begin_layout Standard
1 slice= several subslices L3 data cache (contains local memory: software
 managed).
 Barrier and atomic management.
\end_layout

\begin_layout Standard
kernels run on EU.
 Up to 7 threads and up to 8, 16, 32 work item per thread.
\end_layout

\begin_layout Standard
OpenCL code builder (only for windows).
\end_layout

\begin_layout Standard
Download: Intel® Code Builder for OpenCL™ API for linux.
\end_layout

\begin_layout Standard
Dans visual studio: create a code builder session from a .cl
\end_layout

\begin_layout Standard
possible to build a kernel on different devices
\end_layout

\begin_layout Standard
assign variables to actual memory locations.
\end_layout

\begin_layout Standard
and analyze.
\end_layout

\begin_layout Standard
for debugging a whole app: enable opencl debugger.
 Problem view gives hints about problems
\end_layout

\begin_layout Standard
For debugging a kernel: enable opencl kernel debugger
\end_layout

\begin_layout Standard
command queue view: for seeing event dependency issues.
\end_layout

\begin_layout Standard
think about releasing events created by ndrange call.
\end_layout

\begin_layout Standard
opencl application analysis: api calls analysis kernel execution times memory
 operations timing
\end_layout

\begin_layout Standard
TIPS button for improvements: redondant API calls, bad memory access, HOST/DEVIC
E transfers.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Kernel side profiling
\begin_inset Quotes erd
\end_inset

: occupancy, latency.
\end_layout

\begin_layout Standard
occupancy for each subslice (7 is the best)
\end_layout

\begin_layout Standard
latency: line number of the most expensive operations.
\end_layout

\begin_layout Standard
Optimization: let the compiler choose the work-group size.
 Use MAP/UNMAP and cl_mem_use_host_ptr
\end_layout

\begin_layout Standard
allocate aligned memory (64 bytes and multiple of 4KB pages)
\end_layout

\begin_layout Standard
use native functions and mad 
\end_layout

\end_body
\end_document

#include <stdio.h>
#include <math.h>
#include <assert.h>

#include "test.h"
#include "schnaps.h"

#define _NN 5
#define _NNN 3

int main(void) {
  
  // unit tests
    
  int resu=TestLinearSolver();
	 

  if (resu) printf("Linear solver test OK !\n");
  else printf("Linear solver test failed !\n");

  return !resu;
} 



void NonlinearVector_GX(void* system,field * f,real * solvector,real *nlvector){
  JFLinearSolver* lsol=system;

  nlvector[0] = 9*solvector[0]*solvector[0]+36*solvector[1]*solvector[1]+4*solvector[2]*solvector[2];
  nlvector[1] = solvector[0]*solvector[0]-2*solvector[1]*solvector[1]-20*solvector[2];
  nlvector[2] = solvector[0]*solvector[0]-solvector[1]*solvector[1]+solvector[2]*solvector[2];

}


int TestLinearSolver(void){

  int test=1,test1=1,test2=1,test3=1,test4=1;

  LinearSolver sky;
  JFLinearSolver skyJF;
 


  // preliminary work on the skyline struct
  // _NN is the size of the linear system to be solved
  InitLinearSolver(&sky,_NN,NULL,NULL);

  sky.solver_type = LU;
  sky.pc_type=NONE;

  real A[_NN][_NN];
  real vf[_NN],sol[_NN];
  real b[_NNN],sold[_NNN],soln[_NNN],fsoln[_NNN];

  A[0][0] = 0.2e1;
  A[0][1] = -0.1e1;
  A[0][2] = 0;
  A[0][3] = 0;
  A[0][4] = 0;
  A[1][0] = -0.1e1;
  A[1][1] = 0.2e1;
  A[1][2] = -0.1e1;
  A[1][3] = 0;
  A[1][4] = 0;
  A[2][0] = 0;
  A[2][1] = -0.1e1;
  A[2][2] = 0.2e1;
  A[2][3] = -0.1e1;
  A[2][4] = 0;
  A[3][0] = 0;
  A[3][1] = 0;
  A[3][2] = -0.1e1;
  A[3][3] = 0.2e1;
  A[3][4] = -0.1e1;
  A[4][0] = 0;
  A[4][1] = 0;
  A[4][2] = 0;
  A[4][3] = -0.1e1;
  A[4][4] = 0.2e1;
  vf[0] = 0;
  vf[1] = 0;
  vf[2] = 0;
  vf[3] = 0;
  vf[4] = 0.6e1;

  sol[0] = 0;
  sol[1] = 0;
  sol[2] = 0;
  sol[3] = 0;
  sol[4] = 0;



  // first mark the nonzero values in A
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0) IsNonZero(&sky,i,j);
      //if (i==j) SwitchOn(&sky,i,j);
    }
  }

  // once the nonzero positions are known allocate memory
  AllocateLinearSolver(&sky);

  // now set the nonzero terms
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0){
      	AddLinearSolver(&sky,i,j,A[i][j]);
      }
      /* if (i==j){ */
      /* 	SetLinearSolver(&sky,i,j,2); */
      /* } */
    }
  }


  // printf for checking...
  DisplayLinearSolver(&sky);


  // solve from a decomposed matrix
  // vf: rhs
  // sol: solution

  sky.rhs=vf;
  sky.sol=sol;
  SolveLinearSolver(&sky);


  // checking
  real verr=0;
  printf("sol of LU=");
  for(int i=0;i<_NN;i++){
    printf("%f ",sol[i]);
    verr+=fabs(sol[i]-i-1);
  }
  printf("\n");
  printf("\n");
  // deallocate memory
  FreeLinearSolver(&sky);
  

  test1= (verr<1e-10);


#ifdef PARALUTION
  // preliminary work on the skyline struct
  // _NN is the size of the linear system to be solved
  InitLinearSolver(&sky,_NN,NULL,NULL);

  sky.solver_type = PAR_GMRES;
  sky.pc_type=PAR_JACOBI;

  A[0][0] = 0.2e1;
  A[0][1] = -0.1e1;
  A[0][2] = 0;
  A[0][3] = 0;
  A[0][4] = 0;
  A[1][0] = -0.1e1;
  A[1][1] = 0.2e1;
  A[1][2] = -0.1e1;
  A[1][3] = 0;
  A[1][4] = 0;
  A[2][0] = 0;
  A[2][1] = -0.1e1;
  A[2][2] = 0.2e1;
  A[2][3] = -0.1e1;
  A[2][4] = 0;
  A[3][0] = 0;
  A[3][1] = 0;
  A[3][2] = -0.1e1;
  A[3][3] = 0.2e1;
  A[3][4] = -0.1e1;
  A[4][0] = 0;
  A[4][1] = 0;
  A[4][2] = 0;
  A[4][3] = -0.1e1;
  A[4][4] = 0.2e1;
  vf[0] = 0;
  vf[1] = 0;
  vf[2] = 0;
  vf[3] = 0;
  vf[4] = 0.6e1;

  sol[0] = 0;
  sol[1] = 0;
  sol[2] = 0;
  sol[3] = 0;
  sol[4] = 0;



  // first mark the nonzero values in A
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0) IsNonZero(&sky,i,j);
      //if (i==j) SwitchOn(&sky,i,j);
    }
  }

  // once the nonzero positions are known allocate memory
  AllocateLinearSolver(&sky);

  // now set the nonzero terms
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0){
      	AddLinearSolver(&sky,i,j,A[i][j]);
      }
      /* if (i==j){ */
      /* 	SetLinearSolver(&sky,i,j,2); */
      /* } */
    }
  }

  sky.rhs=vf;
  sky.sol=sol;
  SolveLinearSolver(&sky);


  // checking
  verr=0;
  printf("sol of paralution=");
  for(int i=0;i<_NN;i++){
    printf("%f ",sol[i]);
    verr+=fabs(sol[i]-i-1);
  }
  printf("\n");
  printf("\n");

  // deallocate memory
  FreeLinearSolver(&sky);
  

  test2= (verr<1e-6);
#endif*/

  InitLinearSolver(&sky,_NN,NULL,NULL);

  sky.solver_type = GMRES;
  sky.pc_type=NONE;
  
  // now test a symmetric matrix
  A[0][0] = 0.3e1;
  A[0][1] = -0.1e1;
  A[0][2] = 0;
  A[0][3] = 0;
  A[0][4] = -0.1e1;
  A[1][0] = -0.1e1;
  A[1][1] = 0.2e1;
  A[1][2] = -0.1e1;
  A[1][3] = 0;
  A[1][4] = 0;
  A[2][0] = 0;
  A[2][1] = -0.1e1;
  A[2][2] = 0.2e1;
  A[2][3] = -0.1e1;
  A[2][4] = 0;
  A[3][0] = 0;
  A[3][1] = 0;
  A[3][2] = -0.1e1;
  A[3][3] = 0.2e1;
  A[3][4] = -0.1e1;
  A[4][0] = -0.1e1;
  A[4][1] = 0;
  A[4][2] = 0;
  A[4][3] = -0.1e1;
  A[4][4] = 0.3e1;
  vf[0] = -0.4e1;
  vf[1] = 0;
  vf[2] = 0;
  vf[3] = 0;
  vf[4] = 0.10e2;

  sol[0] = 0;
  sol[1] = 0;
  sol[2] = 0;
  sol[3] = 0;
  sol[4] = 0;

  sky.is_sym=false;

  // first mark the nonzero values in A
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0) IsNonZero(&sky,i,j);
    }
  }

  // once the nonzero positions are known allocate memory
  AllocateLinearSolver(&sky);

  // now set the nonzero terms
  for(int i=0;i<_NN;i++){
    for(int j=0;j<_NN;j++){
      if (A[i][j] != 0){
      	AddLinearSolver(&sky,i,j,A[i][j]);
      }
    }
  }

  sky.rhs=vf;
  sky.sol=sol;
  SolveLinearSolver(&sky);


  // checking
  verr=0;
  printf("sol of gmres=");
  for(int i=0;i<_NN;i++){
    printf("%f ",sol[i]);
    verr+=fabs(sol[i]-i-1);
  }
  printf("\n");
  printf("\n");

  // deallocate memory
  FreeLinearSolver(&sky);

  test3 =  (verr<1e-6);

  InitLinearSolver(&sky,_NNN,NULL,NULL);

  sky.solver_type = PAR_GMRES;
  sky.pc_type=NONE;

  A[0][0] = 1.8e1;
  A[0][1] = 7.2e1;
  A[0][2] = 0;
  A[1][0] = 2.0e0;
  A[1][1] = -4.0e0;
  A[1][2] = -2.0e1;
  A[2][0] = 2.0e0;
  A[2][1] = -2.0e0;
  A[2][2] = -0.0;
  vf[0] = -0.9e1;
  vf[1] = 0.1e1;
  vf[2] = 0.0;

  sol[0] = 0;
  sol[1] = 0;
  sol[2] = 0;

  sky.is_sym=false;

  // first mark the nonzero values in A
  for(int i=0;i<_NNN;i++){
    for(int j=0;j<_NNN;j++){
      if (A[i][j] != 0) IsNonZero(&sky,i,j);
    }
  }

  // once the nonzero positions are known allocate memory
  AllocateLinearSolver(&sky);

  // now set the nonzero terms
  for(int i=0;i<_NNN;i++){
    for(int j=0;j<_NNN;j++){
      if (A[i][j] != 0){
      	AddLinearSolver(&sky,i,j,A[i][j]);
      }
    }
  }

  sky.rhs=vf;
  sky.sol=sol;
  SolveLinearSolver(&sky);


  // checking
  verr=0;
  printf("sol ofsdlmdjskfjksfjs=");
  for(int i=0;i<_NNN;i++){
    printf("%f ",sol[i]);
  }
  printf("\n");
  printf("\n");

  // deallocate memory
  FreeLinearSolver(&sky);



  

  InitJFLinearSolver(&skyJF,_NNN,NULL);

  skyJF.solver_type = GMRES;
  skyJF.pc_type=NONE;
  skyJF.eps=0.00001;
  skyJF.NonlinearVector_computation=NonlinearVector_GX;
  
  b[0] = 3.6e1;
  b[1] = 0;
  b[2] = 0;


  sold[0] = 0.0;
  sold[1] = 0.0;
  sold[2] = 0.0;
  
  soln[0] = 1;
  soln[1] = 1;
  soln[2] = 0;

  fsoln[0] = 0;
  fsoln[1] = 0;
  fsoln[2] = 0;
  
  skyJF.sol=sold;
  skyJF.soln=soln;
  skyJF.rhs=b;
  
  for(int i=1;i<2;i++){
    NonlinearVector_GX(&skyJF,NULL,soln,fsoln);
    
    b[0] = b[0]-fsoln[0];
    b[1] = b[1]-fsoln[1];
    b[2] = b[2]-fsoln[2];
    
    
    SolveJFLinearSolver(&skyJF,NULL);
    
    soln[0] = soln[0]+skyJF.sol[0];
    soln[1] = soln[1]+skyJF.sol[1];
    soln[2] = soln[2]+skyJF.sol[2];

    printf("linear solution:");
    printf(" Delta sol %f %f %f \n",skyJF.sol[0],skyJF.sol[1],skyJF.sol[2]);
    printf(" sol %f %f %f \n",soln[0],soln[1],soln[2]);
    printf(" rhs %f %f %f \n",skyJF.rhs[0],skyJF.rhs[1],skyJF.rhs[2]);
    printf("\n");
    printf("\n");

  }

  // checking
  verr=0;
  printf("nonlienar solution:");
  printf(" sol %f %f %f \n",sol[0],sol[1],sol[2]);
  verr=fabs(sol[0]-0.893628)+fabs(sol[1]-0.894527)+fabs(sol[2]+0.040083);
  printf("\n");
  printf("\n");

  // deallocate memory
  FreeJFLinearSolver(&skyJF);

  test4 =  (verr<1e-6);

  

  if(test1==1 &&  test2==1 && test3==1 && test4) test=1;

  return test;

}
